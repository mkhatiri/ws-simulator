*Rediger le résultat que j'ai avec les différent prog pour une reproduction simplement les même simulation au cas de besoin. (ce vendredi.)

* graphes vs divisble : 1 jour
expes avec meme W et D et p et l
-> quelles diffs sur l'overhead
conjecture fred : plus de variabilite sur les graphes
---> c'est faux, il y a une perte de perfs sur les graphes.
--> par exemple pour le merge sort, le generateur cree peu de taches de merge pour les niveaux eleves.
--> il y a donc une contention sur ce niveau. (reste lié à D)
--> cet effet disparaitra pour les graphes autogeneres (01/10/2018)

* passe de verification du code actuel

1er Possibilité de travail:
    * moteur de graphes dans le simulateur
     - comprendre le principe (quelques jours)
     - coder (1 jour)
     - debug (quelques jours)

--> OK (05/10/2018)

Retouche
    - children_id > ok
    - modif divisible load > ok
    - renommage task > OK
    - chgt constructeurs > OK

Reste :
   -> lien entre taille d'entree et travail
   -> faire une lambda qui renvoie n log n + les while pour les estimations de temps

---> OK (10/10/2018)

* expes: faire varier le facteur d'agrandissement des blocs (actuellement phi)
  -> sur le tri fusion adaptatif
  -> tracer le temps d'exec et idle time et waiting time

---> mis en lumiere des problemes specifiques au tri fusion. en particulier decouper en 2 morceaux
egaux augmente le travail
---> changement d'exemple : solver (23/10/2018)

* idee de preuve : borner le temps d'exec maintenant que l'on a les waiting time
   -> mettre une taille de blocs maximale ???? minimale ???
   ajout d'un surcout de creation de tache
   quelle politique pour les tailles de blocs ? (algo competitif)
   on pourrait faire une analyse d'abord sans les waiting et idle time


* "implementer" differents algos

* modele d'acces aux donnees
  - modele ?
  - vrais expes pour trouver le modele
  - simulateur (mettre a jour)
  - simulations
  - output1 : meilleurs algos de scheduling
  - output2 : comparaisons de modeles
  - preuves ????


2éme Possibilité de travail :
    * preuve : (sur deux cluster)
      - t en fonction de proc, proba, W, D, lambda
        + conjecture ?
          nb vols distants ?
          nb vols locaux ?
           ratio des 2 ?
        + preuve ?


